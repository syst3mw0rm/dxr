Rust plugin
-----------

Work in progess, not ready for use.

Tracked by https://bugzilla.mozilla.org/show_bug.cgi?id=956768

This plugin is disabled by default. You need to set disabled plugins to something
other than 'rust' to use it. (TODO that is probably wrong, we need to hardcode it,
so that disable='' -> disabling rust and it needs to be explicitly enabled)

Unlike Clang there is no mechanism for plugins for Rust. So the strategy is to
hack the compiler to output dxr csvs and make it more generic later...

TODO
----

File a bunch of bugzilla bugs

scopes so we can query items in a module, class etc.

multiple files and paths in one crate

multiple crates

sort out the lhs bar

rename dxr -> dump ...

jump to stdlib index somewhere for stdlib etc. refs. (maybe this will come out in the wash; doubt it)
  jump to docs or source, maybe
handle calls into C via the FFI using the clang plugin (and vice versa, I guess)
effects of functions (purity etc.)
  other static analysis type info from the compiler

how to handle macros - are we checking the ast before or after expansion?
  - I think after, and this is kinda busted sometimes

refactor to share python code with the clang plugin?

Need to add a layer of indirection for ast ids -> db ids (in the dxr (and clang) plugin) so we
don't clash with rows from the clang plugin (or make the language part of the id or something)

compiler warnings

bugs
----

text search - case sensitivity bug - check its OK after rebase

items
-----

method defs + refs
  static methods
    trait refs in static method calls
  virtual methods
  args, self
fn defs + calls (add callers/callees, other stuff)
  + fn refs = calls + stored into a var + other?
  other ways we can get a fn_decl - methods, closures, inline anon fns, procs, bare funs

multiple crates
  extern mod

type param defs + refs
lifetime param defs + refs
non-mut vars (locals, statics) should get a value tooltip
...



